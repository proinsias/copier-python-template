[tool.poetry]
name = "{{ package_name_py }}"
version = "0.0.1"
description = "{{ project_description }}"
license = "Unlicense"
authors = ["{{ author_name }} <{{ author_email }}>"]
maintainers = []
repository = "{{ repository_provider }}/{{ repository_namespace }}/{{ package_name_py }}"
documentation = "{{ repository_provider }}/{{ repository_namespace }}/{{ package_name_py }}/docs"
readme = "README.md"
include = ["LICENSE"]
packages = [{ include = "{{project_name}}", from = "src" }]
keywords = []
classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
] # https://pypi.org/classifiers/

[tool.poetry.urls]
"Bug Tracker" = "{{ repository_provider }}/{{ repository_namespace }}/{{ package_name_py }}/issues"

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.dev-dependencies]
absolufy-imports = "*"
add-trailing-comma = "*"
auto-walrus = "*"
black = ">=22.6.0"
blacken-docs = "*"
darglint = "*"
flynt = "*"
gitlint = "*"
{% if docs -%}
mkdocs = "*"
mkdocs-material = "*"
{%- endif %}
mypy = "*"
poethepoet = "*"
pre-commit = "*"
pycln = "*"
pytest = ">=6.2.1"  # Avoid safety #39253 vulnerability (CVE-2020-29651).
pytest-black = "*"
pytest-mock = ">=3.8.2"
pytest-profiling = "*"
pytest-sugar = "*"
pytest-xdist = "*"
refurb = "*"
ruff = "*"
sqlfluff = "*"
texthooks = "*"
vulture = "*"

[tool.bandit]
# exclude_dirs = [".venv", "shared"]

[tool.bandit.assert_used]
# skips = ['*_test.py', '*test_*.py', '*unittest.py']

[tool.black]
# extend-exclude = 'shared'
# skip-string-normalization = true
# target-version = ['py38']

[tool.docformatter]
recursive = true
wrap-descriptions = 120
wrap-summaries = 120

[tool.flakehell]
max_line_length = 88

[tool.sqlfluff.core]
# dialect = "mysql"

[tool.sqlfluff.rules]
comma_style = "leading"
# tab_space_size = 2

[tool.sqlfluff:rules.L010]
# capitalisation_policy = lower

[tool.sqlfluff.rules.L052]
# Semi-colon formatting approach
multiline_newline = true
require_final_semicolon = true

[tool.pytest.ini_options]
testpaths = ["tests"]
# Add command line options to pytest.
# black: run black formatter.
# doctest-modules: run doctests from docstrings in all python modules.
# durations: print duration of slowest tests.
# n auto: Use all CPUs for parallel processing.
# profile: generate code profile via pytest_profiling plugin.
# verbose: increase verbosity.
addopts = --black --doctest-modules --durations=0 --durations-min=1.0 -n auto --profile --verbose
# Enable log display during test run.
log_cli = true
# testpaths = []

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]

builtins = ["_"]

# Avoiding flagging (and removing) `V101` from any `# noqa`
# directives, despite Ruff's lack of support for `vulture`.
external = ["V101"]

select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EM",  # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "NPY", # numpy
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]

# FIXME: Review https://beta.ruff.rs/docs/rules/#flake8-2020-ytt for additional flake8 plugins to emulate.

ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py38"  # Keep in sync with tool.poetry.dependencies.python

[tool.ruff.isort]

[tool.ruff.pycodestyle]
max-doc-length = 88  # Black.

[tool.ruff.pydocstyle]
convention = "google"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

# FIXME: Do I need this anymore?
# FIXME: Convert to tool.ruff.pylint.

[tool.pylint.'MASTER']

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore="CVS"

# Pickle collected data for later comparisons.
persistent="yes"

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
#load-plugins=

# Use multiple processes to speed up Pylint.
# 0 - Use all CPUs
jobs=0

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension="no"

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist="numpy"

[tool.pylint.'MESSAGES CONTROL']

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
#confidence=

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"

[tool.pylint.'REPORTS']

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format="text"

# Tells whether to display a full report or only the messages
reports="yes"

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation="10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=


[tool.pylint.'BASIC']

# Good variable names which should always be accepted, separated by a comma
good-names="i,j,k,ex,Run,_"

# Bad variable names which should always be refused, separated by a comma
bad-names="foo,bar,baz,toto,tutu,tata"

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
#name-group=

# Include a hint for the correct naming format with invalid-name
include-naming-hint="no"

# Regular expression matching correct argument names
argument-rgx="[a-z_][a-z0-9_]{2,30}$"

# Regular expression matching correct inline iteration names
inlinevar-rgx="[A-Za-z_][A-Za-z0-9_]*$"

# Regular expression matching correct module names
module-rgx="(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"

# Regular expression matching correct constant names
const-rgx="(([A-Z_][A-Z0-9_]*)|(__.*__))$"

# Regular expression matching correct variable names
variable-rgx="[a-z_][a-z0-9_]{2,30}$"

# Regular expression matching correct class names
class-rgx="[A-Z_][a-zA-Z0-9]+$"

# Regular expression matching correct class attribute names
class-attribute-rgx="([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"

# Regular expression matching correct attribute names
attr-rgx="[a-z_][a-z0-9_]{2,30}$"

# Regular expression matching correct method names
method-rgx="[a-z_][a-z0-9_]{2,30}$"

# Regular expression matching correct function names
function-rgx="[a-z_][a-z0-9_]{2,30}$"

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx="^_"

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

[tool.pylint.'ELIF']

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

[tool.pylint.'FORMAT']

# Maximum number of characters on a single line.
max-line-length=120

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines="^\s*(# )?<?https?://\S+>?$"

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt="no"

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
#expected-line-ending-format=

[tool.pylint.'LOGGING']

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules="logging"

[tool.pylint.'MISCELLANEOUS']

# List of note tags to take in consideration, separated by a comma.
notes="FIXME,XXX,TODO"

[tool.pylint.'SIMILARITIES']

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments="yes"

# Ignore docstrings when computing similarities.
ignore-docstrings="yes"

# Ignore imports when computing similarities.
ignore-imports="no"

[tool.pylint.'SPELLING']

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
#spelling-dict=

# List of comma separated words that should not be checked.
#spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
#spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words="no"

[tool.pylint.'TYPECHECK']

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members="yes"

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
#ignored-modules=

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set). This supports can work
# with qualified names.
#ignored-classes=

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
#generated-members=

[tool.pylint.'VARIABLES']

# Tells whether we should check for unused import in __init__ files.
init-import="no"

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx="_$|dummy"

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
#additional-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks="cb_,_cb"

[tool.pylint.'CLASSES']

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods="__init__,__new__,setUp"

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg="cls"

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg="mcs"

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected="_asdict,_fields,_replace,_source,_make"

[tool.pylint.'DESIGN']

# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names="_.*"

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

[tool.pylint.'IMPORTS']

# Deprecated modules which should not be used, separated by a comma
deprecated-modules="optparse"

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
#import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
#ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
#int-import-graph=

[tool.pylint.'EXCEPTIONS']

# Exceptions that will emit a warning when being caught. Defaults to "Exception".
overgeneral-exceptions="Exception"
